// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package validator_mocks is a generated GoMock package.
package validator_mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateUsername mocks base method
func (m *MockValidator) ValidateUsername(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUsername", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUsername indicates an expected call of ValidateUsername
func (mr *MockValidatorMockRecorder) ValidateUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUsername", reflect.TypeOf((*MockValidator)(nil).ValidateUsername), username)
}

// ValidatePassword mocks base method
func (m *MockValidator) ValidatePassword(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword
func (mr *MockValidatorMockRecorder) ValidatePassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockValidator)(nil).ValidatePassword), password)
}
